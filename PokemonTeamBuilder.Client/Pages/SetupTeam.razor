@page "/setup-team"
@using PokeApiNet
@using PokemonTeamBuilder.Client.Helper
@using Shared_Library.Dto
@using Shared_Library.Models

@inject IPokemonService _pokemonService;
@inject IItemService _itemService;
@inject ITeamService _teamService;
@inject IMoveService _moveService;

<div class="d-flex align-items-center justify-content-center m-4">
	<h1>MY POKEMON TEAM</h1>
</div>

<div class="d-flex flex-md-wrap flex-column">
	
		<div class="d-flex w-50 flex-column">
			<div class="d-flex flex-md-wrap">
				@foreach (var pokemonChoose in PokemonChooses)
				{

					<div class="d-flex flex-row border-1 m-2 rounded-1" style="height: 280px; width: 300px">
						<div class="d-flex flex-column w-50">
							<div>
								<MudAutocomplete T="string" Label="Name" @bind-Value="pokemonChoose.PokemonName"
												 SearchFuncWithCancel="async (search, token) => {return  await PokemonSearchHelper<Pokemon>.SearchName(search, pokemonList.Results, token);}" TextChanged="OnSelectPokemon"></MudAutocomplete>
							</div>
							<div class="d-flex align-items-center justify-content-center m-2" style="height: 80px">
								@if (string.IsNullOrEmpty(pokemonChoose.PicUrl))
								{
									<img src="/Pic/question.png" height="66" width="84" />
								}
								else
								{
									<img src="@pokemonChoose.PicUrl" height="60" width="60" />
								}
							</div>
							<MudAutocomplete MaxHeight="35" T="string" @bind-Value="pokemonChoose.ItemName" Label="Item"
											 SearchFuncWithCancel="async (search, token) => {return await PokemonSearchHelper<Item>.SearchName(search, ItemList.Results, token);}"></MudAutocomplete>

						</div>
						<div class="d-flex flex-column w-50">
							@foreach (var pokemonMove in pokemonChoose.Moves)
							{
								<div class="d-flex flex-grow-1">
									<MudAutocomplete T="string" @bind-Value="pokemonMove.Name" Label="Move"
													 SearchFuncWithCancel="async (search, token) => {return await PokemonSearchHelper<Move>.SearchName(search, PokemonInfo[FindIndexHasPokName(pokemonChoose.PokemonName)].Moves.Select(m => m.Move).ToList(), token);}"></MudAutocomplete>
								</div>

							}
							<div class="d-flex flex-grow-1">
								<MudAutocomplete T="string" @bind-Value="pokemonChoose.AbilityName" Label="Ability"
												 SearchFuncWithCancel="async (search, token) => {return await PokemonSearchHelper<Ability>.SearchName(search, PokemonInfo[FindIndexHasPokName(pokemonChoose.PokemonName)].Abilities.Select(a => a.Ability).ToList(), token);}"></MudAutocomplete>
							</div>
						</div>
					</div>
				}
			</div>

			<div class="d-flex justify-content-end">
				<MudButton OnClick="OnSave" Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Save</MudButton>
			</div>
		</div>
		

		<div class="d-flex flex-md-wrap w-50">
			
		</div>
	
</div>

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name ="IsUpdate")]
	public bool IsUpdate { get; set; }
	[Parameter]
	[SupplyParameterFromQuery(Name = "TeamId")]
	public int TeamId { get; set; }

	List<PokemonSetUp> PokemonChooses { get; set; }
	List<Pokemon> PokemonInfo { get; set; }

	NamedApiResourceList<Pokemon> pokemonList { get; set; }
	NamedApiResourceList<Item> ItemList { get; set; }
	protected override async Task OnInitializedAsync()
	{
		PokemonChooses = new List<PokemonSetUp>();
		PokemonInfo = new List<Pokemon>();
		for(int i = 0; i < 6; i++)
		{
			PokemonChooses.Add(new PokemonSetUp());
			PokemonInfo.Add(new Pokemon());
		}

		pokemonList = await _pokemonService.GetAllPokemonAsync();
		ItemList = await _itemService.GetAllItemsAsync();
	}


	private async Task<IEnumerable<string>> SearchPokemonName(string searchText, CancellationToken token)
	{
		await Task.Delay(5, token);

		var result = await Task.Run(() =>
		{
			if (string.IsNullOrEmpty(searchText))
			{
				return pokemonList.Results.Select(p => p.Name);
			}

			return pokemonList.Results.Where(p => p.Name.ToLower().Contains(searchText.ToLower())).Select(p => p.Name);
		});
		return result.ToList();
	}

	private async Task OnSelectPokemon(string PokName)
	{
		int index = FindIndexHasPokName(PokName);
		if(CheckPokemonName(PokName))
		{

			PokemonInfo[index] = await _pokemonService.GetPokemonInfoByNameAsync(PokName);
			PokemonChooses[index].PicUrl = $"https://play.pokemonshowdown.com/sprites/ani/{PokemonInfo[index].Name.ToLower()}.gif";
			PokemonChooses[index].Types = PokemonInfo[index].Types.Select(t => new TypeDto {Name = t.Type.Name }).ToList();
			PokemonChooses[index].PokId = PokemonInfo[index].Id;
			PokemonChooses[index].IsValid = true;
		}
		else
		{
			PokemonChooses[index].IsValid = false;
		}

	}

	private bool CheckPokemonName(string PokName)
	{
		foreach(var pokemon in pokemonList.Results)
		{
			if(pokemon.Name == PokName)
			{
				return true;
			}
		}
		return false;
	}

	private int FindIndexHasPokName(string PokName)
	{
		for(int i = 0; i < PokemonChooses.Count; i++)
		{
			if(PokemonChooses[i].PokemonName == PokName)
			{
				return i;
			}
		}
		return -1;
	}

	private async Task<PokemonMoveChoose> CheckMoveValid(string name)
	{
		var result = await _moveService.GetMoveByName(name);
		return result;
	}

	private async Task OnSave()
	{
		var info = new AddPokemonSetupRequest
		{
			TeamId = TeamId,
		};
		var pokemonsSelected = new List<PokemonSetUp>();
		for(int i = 0; i < 6; i++)
		{

			if(PokemonChooses[i].IsValid != null && PokemonChooses[i].IsValid == true)
			{
				PokemonSetUp pokemon = new PokemonSetUp 
				{
					PokemonName = PokemonChooses[i].PokemonName,
					PokId = PokemonChooses[i].PokId,
					ItemName = PokemonChooses[i].ItemName,
					AbilityName = PokemonChooses[i].AbilityName,
					Moves = new List<PokemonMoveChoose>(),
				};
				foreach(var move in PokemonChooses[i].Moves)
				{
					var moveInfo = await CheckMoveValid(move.Name);
					if(moveInfo != null)
					{
						pokemon.Moves.Add(moveInfo);
					}
				}
				pokemonsSelected.Add(pokemon);
			}
		}
		info.PokemonSetupList = pokemonsSelected;
		await _teamService.UpdateTeam(info);
	}

}
